Terminals unused in grammar

   DO
   BREAK
   CHAR
   DOUBLE
   SWITCH
   CASE
   DEFAULT
   CONTINUE


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program unit
    3        | unit

    4 unit: var_declaration
    5     | func_definition

    6 $@1: /* empty */

    7 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 compound_statement

    8 $@2: /* empty */

    9 func_definition: type_specifier ID LPAREN RPAREN $@2 compound_statement

   10 parameter_list: parameter_list COMMA type_specifier ID
   11               | parameter_list COMMA type_specifier
   12               | type_specifier ID
   13               | type_specifier

   14 $@3: /* empty */

   15 compound_statement: LCURL $@3 statements RCURL

   16 $@4: /* empty */

   17 compound_statement: LCURL $@4 RCURL

   18 var_declaration: type_specifier declaration_list SEMICOLON

   19 type_specifier: INT
   20               | FLOAT
   21               | VOID

   22 declaration_list: declaration_list COMMA ID
   23                 | declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
   24                 | ID
   25                 | ID LTHIRD CONST_INT RTHIRD

   26 statements: statement
   27           | statements statement

   28 statement: var_declaration
   29          | func_definition
   30          | expression_statement
   31          | compound_statement
   32          | FOR LPAREN expression_statement expression_statement expression RPAREN statement
   33          | IF LPAREN expression RPAREN statement
   34          | IF LPAREN expression RPAREN statement ELSE statement
   35          | WHILE LPAREN expression RPAREN statement
   36          | PRINTLN LPAREN ID RPAREN SEMICOLON
   37          | RETURN expression SEMICOLON

   38 expression_statement: SEMICOLON
   39                     | expression SEMICOLON

   40 variable: ID
   41         | ID LTHIRD expression RTHIRD

   42 expression: logic_expression
   43           | variable ASSIGNOP logic_expression

   44 logic_expression: rel_expression
   45                 | rel_expression LOGICOP rel_expression

   46 rel_expression: simple_expression
   47               | simple_expression RELOP simple_expression

   48 simple_expression: term
   49                  | simple_expression ADDOP term

   50 term: unary_expression
   51     | term MULOP unary_expression

   52 unary_expression: ADDOP unary_expression
   53                 | NOT unary_expression
   54                 | factor

   55 factor: variable
   56       | ID LPAREN argument_list RPAREN
   57       | LPAREN expression RPAREN
   58       | CONST_INT
   59       | CONST_FLOAT
   60       | variable INCOP
   61       | variable DECOP

   62 argument_list: arguments
   63              | /* empty */

   64 arguments: arguments COMMA logic_expression
   65          | logic_expression


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 33 34
ELSE (259) 34
FOR (260) 32
WHILE (261) 35
DO (262)
BREAK (263)
INT (264) 19
CHAR (265)
FLOAT (266) 20
DOUBLE (267)
VOID (268) 21
RETURN (269) 37
SWITCH (270)
CASE (271)
DEFAULT (272)
CONTINUE (273)
PRINTLN (274) 36
ADDOP (275) 49 52
MULOP (276) 51
INCOP (277) 60
DECOP (278) 61
RELOP (279) 47
ASSIGNOP (280) 43
LOGICOP (281) 45
NOT (282) 53
LPAREN (283) 7 9 32 33 34 35 36 56 57
RPAREN (284) 7 9 32 33 34 35 36 56 57
LCURL (285) 15 17
RCURL (286) 15 17
LTHIRD (287) 23 25 41
RTHIRD (288) 23 25 41
COMMA (289) 10 11 22 23 64
SEMICOLON (290) 18 36 37 38 39
CONST_INT (291) 23 25 58
CONST_FLOAT (292) 59
ID (293) 7 9 10 12 22 23 24 25 36 40 41 56
LOWER_THAN_ELSE (294)


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
start (41)
    on left: 1, on right: 0
program (42)
    on left: 2 3, on right: 1 2
unit (43)
    on left: 4 5, on right: 2 3
func_definition (44)
    on left: 7 9, on right: 5 29
$@1 (45)
    on left: 6, on right: 7
$@2 (46)
    on left: 8, on right: 9
parameter_list (47)
    on left: 10 11 12 13, on right: 7 10 11
compound_statement (48)
    on left: 15 17, on right: 7 9 31
$@3 (49)
    on left: 14, on right: 15
$@4 (50)
    on left: 16, on right: 17
var_declaration (51)
    on left: 18, on right: 4 28
type_specifier (52)
    on left: 19 20 21, on right: 7 9 10 11 12 13 18
declaration_list (53)
    on left: 22 23 24 25, on right: 18 22 23
statements (54)
    on left: 26 27, on right: 15 27
statement (55)
    on left: 28 29 30 31 32 33 34 35 36 37, on right: 26 27 32 33 34
    35
expression_statement (56)
    on left: 38 39, on right: 30 32
variable (57)
    on left: 40 41, on right: 43 55 60 61
expression (58)
    on left: 42 43, on right: 32 33 34 35 37 39 41 57
logic_expression (59)
    on left: 44 45, on right: 42 43 64 65
rel_expression (60)
    on left: 46 47, on right: 44 45
simple_expression (61)
    on left: 48 49, on right: 46 47 49
term (62)
    on left: 50 51, on right: 48 49 51
unary_expression (63)
    on left: 52 53 54, on right: 50 51 52 53
factor (64)
    on left: 55 56 57 58 59 60 61, on right: 54
argument_list (65)
    on left: 62 63, on right: 56
arguments (66)
    on left: 64 65, on right: 62 64


state 0

    0 $accept: . start $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    start            go to state 4
    program          go to state 5
    unit             go to state 6
    func_definition  go to state 7
    var_declaration  go to state 8
    type_specifier   go to state 9


state 1

   19 type_specifier: INT .

    $default  reduce using rule 19 (type_specifier)


state 2

   20 type_specifier: FLOAT .

    $default  reduce using rule 20 (type_specifier)


state 3

   21 type_specifier: VOID .

    $default  reduce using rule 21 (type_specifier)


state 4

    0 $accept: start . $end

    $end  shift, and go to state 10


state 5

    1 start: program .
    2 program: program . unit

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 1 (start)

    unit             go to state 11
    func_definition  go to state 7
    var_declaration  go to state 8
    type_specifier   go to state 9


state 6

    3 program: unit .

    $default  reduce using rule 3 (program)


state 7

    5 unit: func_definition .

    $default  reduce using rule 5 (unit)


state 8

    4 unit: var_declaration .

    $default  reduce using rule 4 (unit)


state 9

    7 func_definition: type_specifier . ID LPAREN parameter_list RPAREN $@1 compound_statement
    9                | type_specifier . ID LPAREN RPAREN $@2 compound_statement
   18 var_declaration: type_specifier . declaration_list SEMICOLON

    ID  shift, and go to state 12

    declaration_list  go to state 13


state 10

    0 $accept: start $end .

    $default  accept


state 11

    2 program: program unit .

    $default  reduce using rule 2 (program)


state 12

    7 func_definition: type_specifier ID . LPAREN parameter_list RPAREN $@1 compound_statement
    9                | type_specifier ID . LPAREN RPAREN $@2 compound_statement
   24 declaration_list: ID .
   25                 | ID . LTHIRD CONST_INT RTHIRD

    LPAREN  shift, and go to state 14
    LTHIRD  shift, and go to state 15

    $default  reduce using rule 24 (declaration_list)


state 13

   18 var_declaration: type_specifier declaration_list . SEMICOLON
   22 declaration_list: declaration_list . COMMA ID
   23                 | declaration_list . COMMA ID LTHIRD CONST_INT RTHIRD

    COMMA      shift, and go to state 16
    SEMICOLON  shift, and go to state 17


state 14

    7 func_definition: type_specifier ID LPAREN . parameter_list RPAREN $@1 compound_statement
    9                | type_specifier ID LPAREN . RPAREN $@2 compound_statement

    INT     shift, and go to state 1
    FLOAT   shift, and go to state 2
    VOID    shift, and go to state 3
    RPAREN  shift, and go to state 18

    parameter_list  go to state 19
    type_specifier  go to state 20


state 15

   25 declaration_list: ID LTHIRD . CONST_INT RTHIRD

    CONST_INT  shift, and go to state 21


state 16

   22 declaration_list: declaration_list COMMA . ID
   23                 | declaration_list COMMA . ID LTHIRD CONST_INT RTHIRD

    ID  shift, and go to state 22


state 17

   18 var_declaration: type_specifier declaration_list SEMICOLON .

    $default  reduce using rule 18 (var_declaration)


state 18

    9 func_definition: type_specifier ID LPAREN RPAREN . $@2 compound_statement

    $default  reduce using rule 8 ($@2)

    $@2  go to state 23


state 19

    7 func_definition: type_specifier ID LPAREN parameter_list . RPAREN $@1 compound_statement
   10 parameter_list: parameter_list . COMMA type_specifier ID
   11               | parameter_list . COMMA type_specifier

    RPAREN  shift, and go to state 24
    COMMA   shift, and go to state 25


state 20

   12 parameter_list: type_specifier . ID
   13               | type_specifier .

    ID  shift, and go to state 26

    $default  reduce using rule 13 (parameter_list)


state 21

   25 declaration_list: ID LTHIRD CONST_INT . RTHIRD

    RTHIRD  shift, and go to state 27


state 22

   22 declaration_list: declaration_list COMMA ID .
   23                 | declaration_list COMMA ID . LTHIRD CONST_INT RTHIRD

    LTHIRD  shift, and go to state 28

    $default  reduce using rule 22 (declaration_list)


state 23

    9 func_definition: type_specifier ID LPAREN RPAREN $@2 . compound_statement

    LCURL  shift, and go to state 29

    compound_statement  go to state 30


state 24

    7 func_definition: type_specifier ID LPAREN parameter_list RPAREN . $@1 compound_statement

    $default  reduce using rule 6 ($@1)

    $@1  go to state 31


state 25

   10 parameter_list: parameter_list COMMA . type_specifier ID
   11               | parameter_list COMMA . type_specifier

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    type_specifier  go to state 32


state 26

   12 parameter_list: type_specifier ID .

    $default  reduce using rule 12 (parameter_list)


state 27

   25 declaration_list: ID LTHIRD CONST_INT RTHIRD .

    $default  reduce using rule 25 (declaration_list)


state 28

   23 declaration_list: declaration_list COMMA ID LTHIRD . CONST_INT RTHIRD

    CONST_INT  shift, and go to state 33


state 29

   15 compound_statement: LCURL . $@3 statements RCURL
   17                   | LCURL . $@4 RCURL

    RCURL     reduce using rule 16 ($@4)
    $default  reduce using rule 14 ($@3)

    $@3  go to state 34
    $@4  go to state 35


state 30

    9 func_definition: type_specifier ID LPAREN RPAREN $@2 compound_statement .

    $default  reduce using rule 9 (func_definition)


state 31

    7 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 . compound_statement

    LCURL  shift, and go to state 29

    compound_statement  go to state 36


state 32

   10 parameter_list: parameter_list COMMA type_specifier . ID
   11               | parameter_list COMMA type_specifier .

    ID  shift, and go to state 37

    $default  reduce using rule 11 (parameter_list)


state 33

   23 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT . RTHIRD

    RTHIRD  shift, and go to state 38


state 34

   15 compound_statement: LCURL $@3 . statements RCURL

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statements            go to state 54
    statement             go to state 55
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 35

   17 compound_statement: LCURL $@4 . RCURL

    RCURL  shift, and go to state 65


state 36

    7 func_definition: type_specifier ID LPAREN parameter_list RPAREN $@1 compound_statement .

    $default  reduce using rule 7 (func_definition)


state 37

   10 parameter_list: parameter_list COMMA type_specifier ID .

    $default  reduce using rule 10 (parameter_list)


state 38

   23 declaration_list: declaration_list COMMA ID LTHIRD CONST_INT RTHIRD .

    $default  reduce using rule 23 (declaration_list)


state 39

   33 statement: IF . LPAREN expression RPAREN statement
   34          | IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN  shift, and go to state 66


state 40

   32 statement: FOR . LPAREN expression_statement expression_statement expression RPAREN statement

    LPAREN  shift, and go to state 67


state 41

   35 statement: WHILE . LPAREN expression RPAREN statement

    LPAREN  shift, and go to state 68


state 42

   37 statement: RETURN . expression SEMICOLON

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 69
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 43

   36 statement: PRINTLN . LPAREN ID RPAREN SEMICOLON

    LPAREN  shift, and go to state 70


state 44

   52 unary_expression: ADDOP . unary_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable          go to state 71
    unary_expression  go to state 72
    factor            go to state 64


state 45

   53 unary_expression: NOT . unary_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable          go to state 71
    unary_expression  go to state 73
    factor            go to state 64


state 46

   57 factor: LPAREN . expression RPAREN

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 74
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 47

   38 expression_statement: SEMICOLON .

    $default  reduce using rule 38 (expression_statement)


state 48

   58 factor: CONST_INT .

    $default  reduce using rule 58 (factor)


state 49

   59 factor: CONST_FLOAT .

    $default  reduce using rule 59 (factor)


state 50

   40 variable: ID .
   41         | ID . LTHIRD expression RTHIRD
   56 factor: ID . LPAREN argument_list RPAREN

    LPAREN  shift, and go to state 75
    LTHIRD  shift, and go to state 76

    $default  reduce using rule 40 (variable)


state 51

   29 statement: func_definition .

    $default  reduce using rule 29 (statement)


state 52

   31 statement: compound_statement .

    $default  reduce using rule 31 (statement)


state 53

   28 statement: var_declaration .

    $default  reduce using rule 28 (statement)


state 54

   15 compound_statement: LCURL $@3 statements . RCURL
   27 statements: statements . statement

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    RCURL        shift, and go to state 77
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statement             go to state 78
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 55

   26 statements: statement .

    $default  reduce using rule 26 (statements)


state 56

   30 statement: expression_statement .

    $default  reduce using rule 30 (statement)


state 57

   43 expression: variable . ASSIGNOP logic_expression
   55 factor: variable .
   60       | variable . INCOP
   61       | variable . DECOP

    INCOP     shift, and go to state 79
    DECOP     shift, and go to state 80
    ASSIGNOP  shift, and go to state 81

    $default  reduce using rule 55 (factor)


state 58

   39 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 82


state 59

   42 expression: logic_expression .

    $default  reduce using rule 42 (expression)


state 60

   44 logic_expression: rel_expression .
   45                 | rel_expression . LOGICOP rel_expression

    LOGICOP  shift, and go to state 83

    $default  reduce using rule 44 (logic_expression)


state 61

   46 rel_expression: simple_expression .
   47               | simple_expression . RELOP simple_expression
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 84
    RELOP  shift, and go to state 85

    $default  reduce using rule 46 (rel_expression)


state 62

   48 simple_expression: term .
   51 term: term . MULOP unary_expression

    MULOP  shift, and go to state 86

    $default  reduce using rule 48 (simple_expression)


state 63

   50 term: unary_expression .

    $default  reduce using rule 50 (term)


state 64

   54 unary_expression: factor .

    $default  reduce using rule 54 (unary_expression)


state 65

   17 compound_statement: LCURL $@4 RCURL .

    $default  reduce using rule 17 (compound_statement)


state 66

   33 statement: IF LPAREN . expression RPAREN statement
   34          | IF LPAREN . expression RPAREN statement ELSE statement

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 87
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 67

   32 statement: FOR LPAREN . expression_statement expression_statement expression RPAREN statement

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    expression_statement  go to state 88
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 68

   35 statement: WHILE LPAREN . expression RPAREN statement

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 89
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 69

   37 statement: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 90


state 70

   36 statement: PRINTLN LPAREN . ID RPAREN SEMICOLON

    ID  shift, and go to state 91


state 71

   55 factor: variable .
   60       | variable . INCOP
   61       | variable . DECOP

    INCOP  shift, and go to state 79
    DECOP  shift, and go to state 80

    $default  reduce using rule 55 (factor)


state 72

   52 unary_expression: ADDOP unary_expression .

    $default  reduce using rule 52 (unary_expression)


state 73

   53 unary_expression: NOT unary_expression .

    $default  reduce using rule 53 (unary_expression)


state 74

   57 factor: LPAREN expression . RPAREN

    RPAREN  shift, and go to state 92


state 75

   56 factor: ID LPAREN . argument_list RPAREN

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    $default  reduce using rule 63 (argument_list)

    variable           go to state 71
    logic_expression   go to state 93
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64
    argument_list      go to state 94
    arguments          go to state 95


state 76

   41 variable: ID LTHIRD . expression RTHIRD

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 96
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 77

   15 compound_statement: LCURL $@3 statements RCURL .

    $default  reduce using rule 15 (compound_statement)


state 78

   27 statements: statements statement .

    $default  reduce using rule 27 (statements)


state 79

   60 factor: variable INCOP .

    $default  reduce using rule 60 (factor)


state 80

   61 factor: variable DECOP .

    $default  reduce using rule 61 (factor)


state 81

   43 expression: variable ASSIGNOP . logic_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 71
    logic_expression   go to state 97
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 82

   39 expression_statement: expression SEMICOLON .

    $default  reduce using rule 39 (expression_statement)


state 83

   45 logic_expression: rel_expression LOGICOP . rel_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 71
    rel_expression     go to state 98
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 84

   49 simple_expression: simple_expression ADDOP . term

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable          go to state 71
    term              go to state 99
    unary_expression  go to state 63
    factor            go to state 64


state 85

   47 rel_expression: simple_expression RELOP . simple_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 71
    simple_expression  go to state 100
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 86

   51 term: term MULOP . unary_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable          go to state 71
    unary_expression  go to state 101
    factor            go to state 64


state 87

   33 statement: IF LPAREN expression . RPAREN statement
   34          | IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN  shift, and go to state 102


state 88

   32 statement: FOR LPAREN expression_statement . expression_statement expression RPAREN statement

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    expression_statement  go to state 103
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 89

   35 statement: WHILE LPAREN expression . RPAREN statement

    RPAREN  shift, and go to state 104


state 90

   37 statement: RETURN expression SEMICOLON .

    $default  reduce using rule 37 (statement)


state 91

   36 statement: PRINTLN LPAREN ID . RPAREN SEMICOLON

    RPAREN  shift, and go to state 105


state 92

   57 factor: LPAREN expression RPAREN .

    $default  reduce using rule 57 (factor)


state 93

   65 arguments: logic_expression .

    $default  reduce using rule 65 (arguments)


state 94

   56 factor: ID LPAREN argument_list . RPAREN

    RPAREN  shift, and go to state 106


state 95

   62 argument_list: arguments .
   64 arguments: arguments . COMMA logic_expression

    COMMA  shift, and go to state 107

    $default  reduce using rule 62 (argument_list)


state 96

   41 variable: ID LTHIRD expression . RTHIRD

    RTHIRD  shift, and go to state 108


state 97

   43 expression: variable ASSIGNOP logic_expression .

    $default  reduce using rule 43 (expression)


state 98

   45 logic_expression: rel_expression LOGICOP rel_expression .

    $default  reduce using rule 45 (logic_expression)


state 99

   49 simple_expression: simple_expression ADDOP term .
   51 term: term . MULOP unary_expression

    MULOP  shift, and go to state 86

    $default  reduce using rule 49 (simple_expression)


state 100

   47 rel_expression: simple_expression RELOP simple_expression .
   49 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 84

    $default  reduce using rule 47 (rel_expression)


state 101

   51 term: term MULOP unary_expression .

    $default  reduce using rule 51 (term)


state 102

   33 statement: IF LPAREN expression RPAREN . statement
   34          | IF LPAREN expression RPAREN . statement ELSE statement

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statement             go to state 109
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 103

   32 statement: FOR LPAREN expression_statement expression_statement . expression RPAREN statement

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 57
    expression         go to state 110
    logic_expression   go to state 59
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 104

   35 statement: WHILE LPAREN expression RPAREN . statement

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statement             go to state 111
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 105

   36 statement: PRINTLN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON  shift, and go to state 112


state 106

   56 factor: ID LPAREN argument_list RPAREN .

    $default  reduce using rule 56 (factor)


state 107

   64 arguments: arguments COMMA . logic_expression

    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    variable           go to state 71
    logic_expression   go to state 113
    rel_expression     go to state 60
    simple_expression  go to state 61
    term               go to state 62
    unary_expression   go to state 63
    factor             go to state 64


state 108

   41 variable: ID LTHIRD expression RTHIRD .

    $default  reduce using rule 41 (variable)


state 109

   33 statement: IF LPAREN expression RPAREN statement .
   34          | IF LPAREN expression RPAREN statement . ELSE statement

    ELSE  shift, and go to state 114

    $default  reduce using rule 33 (statement)


state 110

   32 statement: FOR LPAREN expression_statement expression_statement expression . RPAREN statement

    RPAREN  shift, and go to state 115


state 111

   35 statement: WHILE LPAREN expression RPAREN statement .

    $default  reduce using rule 35 (statement)


state 112

   36 statement: PRINTLN LPAREN ID RPAREN SEMICOLON .

    $default  reduce using rule 36 (statement)


state 113

   64 arguments: arguments COMMA logic_expression .

    $default  reduce using rule 64 (arguments)


state 114

   34 statement: IF LPAREN expression RPAREN statement ELSE . statement

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statement             go to state 116
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 115

   32 statement: FOR LPAREN expression_statement expression_statement expression RPAREN . statement

    IF           shift, and go to state 39
    FOR          shift, and go to state 40
    WHILE        shift, and go to state 41
    INT          shift, and go to state 1
    FLOAT        shift, and go to state 2
    VOID         shift, and go to state 3
    RETURN       shift, and go to state 42
    PRINTLN      shift, and go to state 43
    ADDOP        shift, and go to state 44
    NOT          shift, and go to state 45
    LPAREN       shift, and go to state 46
    LCURL        shift, and go to state 29
    SEMICOLON    shift, and go to state 47
    CONST_INT    shift, and go to state 48
    CONST_FLOAT  shift, and go to state 49
    ID           shift, and go to state 50

    func_definition       go to state 51
    compound_statement    go to state 52
    var_declaration       go to state 53
    type_specifier        go to state 9
    statement             go to state 117
    expression_statement  go to state 56
    variable              go to state 57
    expression            go to state 58
    logic_expression      go to state 59
    rel_expression        go to state 60
    simple_expression     go to state 61
    term                  go to state 62
    unary_expression      go to state 63
    factor                go to state 64


state 116

   34 statement: IF LPAREN expression RPAREN statement ELSE statement .

    $default  reduce using rule 34 (statement)


state 117

   32 statement: FOR LPAREN expression_statement expression_statement expression RPAREN statement .

    $default  reduce using rule 32 (statement)
